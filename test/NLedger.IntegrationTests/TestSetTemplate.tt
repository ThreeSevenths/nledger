<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core.dll" #>
<#@ Assembly Name="System.Xml.dll" #>  
<#@ Assembly Name="System.Xml.Linq.dll" #>  
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#+
void GenerateSet(string folderName, string pathToTests = @"..\..\contrib", string ignoreListPath = @"..\..\contrib\NLTestToolkit\NLTest.IgnoreList.xml") {
	var searchPattern = "*.test";
	var absFolderName = this.Host.ResolvePath(System.IO.Path.Combine(pathToTests, folderName));
	var testFiles = System.IO.Directory.GetFiles(absFolderName, searchPattern);
	var ignoreListXDoc = XDocument.Load(this.Host.ResolvePath(ignoreListPath));
	var ignoreList = ignoreListXDoc.Descendants(XName.Get("ignore")).ToDictionary(x => @"test\" + x.Attribute("test").Value, x => x.Attribute("reason").Value);
	var projectPath = System.IO.Path.GetDirectoryName(this.Host.TemplateFile);
	System.IO.Directory.CreateDirectory(System.IO.Path.Combine(projectPath, folderName));
#>
/* THIS FILE IS GENERATED BY T4 TEMPLATE. DO NOT MAKE ANY MANUAL CODE CHANGES HERE.				*/
/* If the content of this file has to be actualized,  run corresponded .TT file (Text Template)	*/
/* It will re-scan the folder with Ledger Test files and create a new set of unit tests.		*/
using Microsoft.VisualStudio.TestTools.UnitTesting;
namespace NLedger.IntegrationTests
{
    [TestClass]
    [DeploymentItem(@"<#= folderName #>", @"<#= folderName #>")]
    public class TestSet1_<#= folderName.Replace(@"\", "_") #>
    {
		<#+ foreach (var file in testFiles) { 
		System.IO.File.Copy(file, System.IO.Path.Combine(projectPath, folderName, System.IO.Path.GetFileName(file)));
		var shortFileName = System.IO.Path.GetFileName(file);
		var methodName = System.IO.Path.GetFileNameWithoutExtension(shortFileName).Replace("-", "_"); #>

        [TestMethod]
        [TestCategory("Integration")]
<#+ if(ignoreList.ContainsKey(folderName + @"\" + shortFileName)) { #>
        [Ignore]  // Reason: <#= ignoreList[folderName + @"\" + shortFileName] #>
<#+ } #>
        public void IntegrationTest_<#= folderName.Replace(@"\", "_") #>_<#= methodName #>()
        {
            new TestRunner(@"<#= folderName + @"\" + shortFileName #>").Run();
        }
		<#+ } #>

    }
}
<#+ } #>